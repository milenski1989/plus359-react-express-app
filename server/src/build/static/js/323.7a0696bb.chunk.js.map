{"version":3,"file":"static/js/323.7a0696bb.chunk.js","mappings":"8SASA,MA0NA,EA1Ne,KAEX,IAAIA,EAAYC,OAAOC,aACnBC,EAAOC,KAAKC,MAAML,EAAUM,QAAQ,SAExC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,CACzCC,MAAO,GACPC,UAAW,GACXC,WAAY,GACZC,MAAO,EACPC,MAAO,MAGJC,EAAiBC,IAAsBP,EAAAA,EAAAA,UAAS,CACnDQ,gBAAiB,GACjBC,KAAM,GACNC,SAAU,EACVC,OAAQ,MAGLC,EAAgBC,IAAqBb,EAAAA,EAAAA,UAAS,CACjDc,OAAO,EACPC,QAAS,MAGNC,EAAUC,IAAejB,EAAAA,EAAAA,UAAS,IAClCkB,EAAMC,IAAWnB,EAAAA,EAAAA,aACjBoB,EAAWC,IAAgBrB,EAAAA,EAAAA,WAAS,IACpCsB,EAAkBC,IAAuBvB,EAAAA,EAAAA,WAAS,IAClDwB,EAASC,IAAczB,EAAAA,EAAAA,UAAS,KAEhC0B,EAAoBC,IAAyB3B,EAAAA,EAAAA,UAAS,KACtD4B,EAAsBC,IAA2B7B,EAAAA,EAAAA,WAAS,GAE3D8B,EAAaC,UACf,MAAMC,QAAYC,MAAM,uEAClBC,QAAaF,EAAIG,OACvBV,EAAWS,KAGfE,EAAAA,EAAAA,YAAU,KACNN,MACF,IA6FF,OAAO,iCACH,SAACO,EAAA,EAAD,CACIC,KAAM1B,EAAeE,MACrByB,YAAa,IAAM1B,EAAkB,CAAEC,OAAO,EAAOC,QAAS,KAC9DA,QAASH,EAAeG,QACxByB,SAAS,WAEb,SAACH,EAAA,EAAD,CACIC,KAAMhB,EACNiB,YAAa,IAAMhB,GAAoB,GACvCR,QAAQ,+BACRyB,SAAS,aAEb,SAACC,EAAA,EAAD,IAECrB,GACG,SAACsB,EAAA,EAAD,CAAkBC,QAAQ,cAAcC,MAAO5B,EAAU6B,UAAU,SAASC,MAAM,aAElF,UAACC,EAAA,EAAD,CACIC,UAAU,UACVC,GAAI,CACAC,QAAS,OACTC,cAAe,SACfC,OAAQ,YACRC,UAAW,OACXC,MAAO,QAPf,WAUI,SAACC,EAAA,EAAD,CACIC,SAxHYC,IACxB,MAAMC,EAAQD,EAAEE,OAAOC,MAAM,GAC7BzC,EAAQuC,IAuHIG,GAAG,YAAYC,KAAK,OACpBC,aAAa,mBACbC,UAAQ,EACRnB,UAAU,+NACd,cAAGA,UAAU,mDAAb,qCAGA,SAACoB,EAAA,EAAD,CACIC,eAAa,EACbC,QAAS3C,EACT4C,YAAcC,IAAW,SAACd,EAAA,EAAD,IAAec,EAAQC,MAAM,YACtDd,SAAU,CAACe,EAAOC,IAhEKzC,OAAAA,IAC9ByC,GAID7C,EAAsB,IACtBE,GAAwB,GACxBtB,GAAoBkE,IAAD,IACZA,EACH9D,OAAQ6D,OAPZ3C,GAAwB,IA8De6C,CAA+BF,GAC9DR,UAAQ,EACRf,GAAI,CAAC0B,aAAc,WAEvB,SAACpB,EAAA,EAAD,CACIe,MAAM,mBACN1B,MAAOlB,EACPkD,SAAUhD,EACV4B,SAAWC,GA1DIA,CAAAA,IAC3B5B,GAAwB,GACxBF,EAAsB8B,EAAEE,OAAOf,OAC/BrC,GAAoBkE,IAAD,IACZA,EACH9D,OAAQ8C,EAAEE,OAAOf,WAqDQiC,CAAsBpB,GACvCR,GAAI,CAAE0B,aAAc,OAAQrB,MAAO,UAEtCwB,OAAOC,QAAQjF,GAAYkF,KAAI,IAAmB,IAAjBC,EAAKrC,GAAW,EAC9C,OACI,4BACI,gBAAKC,UAAU,uCAEf,SAACU,EAAA,EAAD,CACIe,MAAOW,EACPrC,MAAOA,EACPY,SAAWe,GA1Fb,EAACU,EAAKV,KAC5BxE,GAAe0E,IAAD,IACPA,EACH,CAACQ,GAAMV,EAAMZ,OAAOf,WAuFqBsC,CAAkBD,EAAKV,GAC5CV,GAAG,YAAYsB,KAAMF,EAAKjB,SAAkB,cAARiB,GAA+B,UAARA,EAC3DhC,GAAI,CAAC0B,aAAc,OAAQrB,MAAO,YARhC2B,OAalB,SAACG,EAAA,EAAD,CACI7E,mBAAoBA,KAExB,SAAC8E,EAAA,EAAD,CACIC,QA7JKvD,UACjB,IACI,MAAMwD,EAAoBhB,IACtB,MAAMiB,EAAaC,KAAKC,MAAO,IAAMnB,EAAMoB,OAAUpB,EAAMqB,OAC3D3E,EAAYuE,IAEhBnE,GAAa,GACb,MAAMa,EAAO,IAAI2D,SACjB3D,EAAK4D,OAAO,OAAQ5E,GACpBgB,EAAK4D,OAAO,SAAUhG,EAAWa,QAAUL,EAAgBK,QAC3DuB,EAAK4D,OAAO,QAAShG,EAAWG,OAChCiC,EAAK4D,OAAO,YAAahG,EAAWI,WACpCgC,EAAK4D,OAAO,aAAchG,EAAWK,YACrC+B,EAAK4D,OAAO,QAAShG,EAAWM,OAChC8B,EAAK4D,OAAO,QAAShG,EAAWO,OAChC6B,EAAK4D,OAAO,kBAAmBxF,EAAgBE,iBAC/C0B,EAAK4D,OAAO,OAAQxF,EAAgBG,MACpCyB,EAAK4D,OAAO,WAAYxF,EAAgBI,UACxCwB,EAAK4D,OAAO,UAAWpG,EAAKqG,gBAEtBC,IAAAA,KAAW,uDAAwD9D,EAAM,CAC3E+D,QAAS,CACL,eAAgB,uBAEpBV,iBAAAA,IAEJzD,IACAH,EAAsB,IAEtBV,EAAY,GAEZI,GAAa,GACbE,GAAoB,GACpBxB,EAAc,CACVE,MAAO,GACPC,UAAW,GACXC,WAAY,GACZC,MAAO,EACPC,MAAO,KAGXE,EAAmB,CACfC,gBAAiB,GACjBC,KAAM,GACNC,SAAU,IAGhB,MAAOI,GACLG,EAAY,GAEZI,GAAa,GACbE,GAAoB,GACpBV,EAAkB,CAACC,OAAO,EAAMC,QAASD,EAAMoF,SAAShE,KAAKpB,UA0GrDmC,GAAI,CAACkD,GAAI,GACTrC,KAAK,SACLnB,QAAQ,YACRiC,UAAW1D,IAASpB,EAAWI,YAAcJ,EAAWG,QAAUK,EAAgBK,SAAWL,EAAgBE,gBALjH","sources":["components/Upload.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./Upload.css\";\r\nimport {Autocomplete, Box, Button, CircularProgress, TextField} from \"@mui/material\";\r\nimport \"./App.css\";\r\nimport Message from \"./Message\";\r\nimport Navbar from \"./Navbar\";\r\nimport axios from \"axios\";\r\nimport CascadingDropdowns from \"./CascadingDropdowns\";\r\n\r\nconst Upload = () => {\r\n\r\n    let myStorage = window.localStorage\r\n    let user = JSON.parse(myStorage.getItem('user'));\r\n\r\n    const [inputsData, setInputsData] = useState({\r\n        title: \"\",\r\n        technique: \"\",\r\n        dimensions: \"\",\r\n        price: 0,\r\n        notes: \"\"\r\n    });\r\n\r\n    const [formControlData, setFormControlData] = useState({\r\n        storageLocation: \"\",\r\n        cell: \"\",\r\n        position: 0,\r\n        artist: \"\"\r\n    });\r\n\r\n    const [uploadingError, setUploadingError] = useState({\r\n        error: false,\r\n        message: \"\",\r\n    });\r\n\r\n    const [progress, setProgress] = useState(0)\r\n    const [file, setFile] = useState()\r\n    const [uploading, setUploading] = useState(false)\r\n    const [uploadSuccessful, setUploadSuccessful] = useState(false)\r\n    const [artists, setArtists] = useState([])\r\n    \r\n    const [newArtistFromInput, setNewArtistFromInput] = useState(\"\")\r\n    const [isArtistFromDropdown, setIsArtistFromDropDown] = useState(false)\r\n\r\n    const getArtists = async () => {\r\n        const res = await fetch(`artworks-management-app.vercel.app/artists/relatedToEntries`)\r\n        const data = await res.json()\r\n        setArtists(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getArtists()\r\n    },[])\r\n\r\n    const imageSelectHandler = (e) => {\r\n        const _file = e.target.files[0];\r\n        setFile(_file);\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const onUploadProgress = (event) => {\r\n                const percentage = Math.round((100 * event.loaded) / event.total);\r\n                setProgress(percentage)\r\n            };\r\n            setUploading(true);\r\n            const data = new FormData();\r\n            data.append(\"file\", file);\r\n            data.append(\"artist\", inputsData.artist || formControlData.artist);\r\n            data.append(\"title\", inputsData.title);\r\n            data.append(\"technique\", inputsData.technique);\r\n            data.append(\"dimensions\", inputsData.dimensions);\r\n            data.append(\"price\", inputsData.price);\r\n            data.append(\"notes\", inputsData.notes);\r\n            data.append(\"storageLocation\", formControlData.storageLocation);\r\n            data.append(\"cell\", formControlData.cell);\r\n            data.append(\"position\", formControlData.position)\r\n            data.append(\"by_user\", user.userName)\r\n    \r\n            await axios.post(\"artworks-management-app.vercel.app/s3/upload\", data, {\r\n                headers: {\r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                },\r\n                onUploadProgress\r\n            });\r\n            getArtists()\r\n            setNewArtistFromInput(\"\")\r\n\r\n            setProgress(0)\r\n\r\n            setUploading(false);\r\n            setUploadSuccessful(true);\r\n            setInputsData({\r\n                title: \"\",\r\n                technique: \"\",\r\n                dimensions: \"\",\r\n                price: 0,\r\n                notes: \"\"\r\n            })\r\n\r\n            setFormControlData({\r\n                storageLocation: \"\",\r\n                cell: \"\",\r\n                position: 0\r\n            })\r\n            \r\n        } catch (error) {\r\n            setProgress(0)\r\n\r\n            setUploading(false);\r\n            setUploadSuccessful(false);\r\n            setUploadingError({error: true, message: error.response.data.error})\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (key, event) => {\r\n        setInputsData((prevState) => ({\r\n            ...prevState,\r\n            [key]: event.target.value,\r\n        }))\r\n    }\r\n\r\n    const handleChangeArtistFromDropDown = async (newValue) => {\r\n        if (!newValue) {\r\n            setIsArtistFromDropDown(false)\r\n            return\r\n        } else {\r\n            setNewArtistFromInput(\"\")\r\n            setIsArtistFromDropDown(true)\r\n            setFormControlData((prevState) => ({\r\n                ...prevState,\r\n                artist: newValue,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleChangeNewArtist = (e) => {\r\n        setIsArtistFromDropDown(false)\r\n        setNewArtistFromInput(e.target.value)\r\n        setFormControlData((prevState) => ({\r\n            ...prevState,\r\n            artist: e.target.value,\r\n        }))\r\n    }\r\n \r\n    return <>\r\n        <Message\r\n            open={uploadingError.error}\r\n            handleClose={() => setUploadingError({ error: false, message: \"\" })}\r\n            message={uploadingError.message}\r\n            severity=\"error\" />\r\n\r\n        <Message\r\n            open={uploadSuccessful}\r\n            handleClose={() => setUploadSuccessful(false)}\r\n            message=\"Entry uploaded successfully!\"\r\n            severity=\"success\" />\r\n            \r\n        <Navbar />\r\n\r\n        {uploading ? \r\n            <CircularProgress variant=\"determinate\" value={progress} className=\"loader\" color=\"primary\" />\r\n            : \r\n            <Box\r\n                component=\"section\"\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    margin: '3rem auto',\r\n                    marginTop: '4rem',\r\n                    width: \"60vw\",\r\n                }}\r\n            >\r\n                <TextField\r\n                    onChange={imageSelectHandler} \r\n                    id=\"textField\" type=\"file\" \r\n                    autoComplete=\"current-password\" \r\n                    required \r\n                    className=\"peer cursor-pointer block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"/>\r\n                <p className=\"invisible peer-invalid:visible text-red-400 mt-0\">\r\n                                    Please upload an image\r\n                </p>\r\n                <Autocomplete\r\n                    disablePortal\r\n                    options={artists}\r\n                    renderInput={(params) => <TextField {...params} label=\"Artists\" />}\r\n                    onChange={(event, newValue) => handleChangeArtistFromDropDown(newValue)}\r\n                    required\r\n                    sx={{marginBottom: '1rem'}}\r\n                />\r\n                <TextField\r\n                    label=\"Add a new artist\"\r\n                    value={newArtistFromInput}\r\n                    disabled={isArtistFromDropdown}\r\n                    onChange={(e) => handleChangeNewArtist(e)}\r\n                    sx={{ marginBottom: \"1rem\", width: '60vw' }}\r\n                />\r\n                {Object.entries(inputsData).map(([key, value]) => {\r\n                    return (\r\n                        <div key={key}>\r\n                            <div className=\"flex items-center justify-between\">\r\n                            </div>\r\n                            <TextField \r\n                                label={key}\r\n                                value={value} \r\n                                onChange={(event) => handleInputChange(key, event)} \r\n                                id=\"textField\" name={key} required={key === 'technique' || key === 'title'}\r\n                                sx={{marginBottom: '1rem', width: '60vw'}}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n                <CascadingDropdowns\r\n                    setFormControlData={setFormControlData}\r\n                />\r\n                <Button \r\n                    onClick={handleSubmit}\r\n                    sx={{mt: 2}}\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    disabled={!file || !inputsData.technique || !inputsData.title || !formControlData.artist || !formControlData.storageLocation}>\r\n                                    Upload\r\n                </Button>\r\n            </Box>\r\n        }\r\n    </>          \r\n};\r\n\r\nexport default Upload;\r\n"],"names":["myStorage","window","localStorage","user","JSON","parse","getItem","inputsData","setInputsData","useState","title","technique","dimensions","price","notes","formControlData","setFormControlData","storageLocation","cell","position","artist","uploadingError","setUploadingError","error","message","progress","setProgress","file","setFile","uploading","setUploading","uploadSuccessful","setUploadSuccessful","artists","setArtists","newArtistFromInput","setNewArtistFromInput","isArtistFromDropdown","setIsArtistFromDropDown","getArtists","async","res","fetch","data","json","useEffect","Message","open","handleClose","severity","Navbar","CircularProgress","variant","value","className","color","Box","component","sx","display","flexDirection","margin","marginTop","width","TextField","onChange","e","_file","target","files","id","type","autoComplete","required","Autocomplete","disablePortal","options","renderInput","params","label","event","newValue","prevState","handleChangeArtistFromDropDown","marginBottom","disabled","handleChangeNewArtist","Object","entries","map","key","handleInputChange","name","CascadingDropdowns","Button","onClick","onUploadProgress","percentage","Math","round","loaded","total","FormData","append","userName","axios","headers","response","mt"],"sourceRoot":""}